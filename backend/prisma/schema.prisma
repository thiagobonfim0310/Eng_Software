generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  cpf       String   @unique
  tag       String   @unique
  createdAt DateTime @default(now())
  levelId   String?  // Chave estrangeira para Level
  level     Level?   @relation(fields: [levelId], references: [id], onDelete: SetNull)
  environments EnvironmentUser[]  
  checkIns  CheckIn[]
}

model Environment {
  id              String             @id @default(uuid())
  name            String
  createdAt       DateTime           @default(now())
  parentId        String?           
  parent          Environment?       @relation("SubEnvironments", fields: [parentId], references: [id])
  subEnvironments Environment[]      @relation("SubEnvironments")
  users           EnvironmentUser[]  
  lock            Lock?      
  checkIns        CheckIn[]    
  levelRelations  LevelEnvironment[]  
}

model Level {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  users       User[]   // Relacionamento inverso com User
  environments LevelEnvironment[]
}

model EnvironmentUser {
  userId        String
  environmentId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@id([userId, environmentId])  
}

model Lock {
  id            String      @id @default(uuid())
  name          String
  createdAt     DateTime    @default(now())
  environmentId String?     @unique
  environment   Environment? @relation(fields: [environmentId], references: [id])
}

model CheckIn {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  validated    Boolean  
  
  user         User? @relation(fields: [user_id], references: [id])
  user_id      String?

  environment  Environment @relation(fields: [environment_id], references: [id])
  environment_id String

  @@map("check_ins")
}

model LevelEnvironment {
  levelId       String
  environmentId String
  level         Level        @relation(fields: [levelId], references: [id], onDelete: Cascade)
  environment   Environment  @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@id([levelId, environmentId])
}
